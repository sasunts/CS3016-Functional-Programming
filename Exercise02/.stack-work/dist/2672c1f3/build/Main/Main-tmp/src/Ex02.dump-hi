
==================== FINAL INTERFACE ====================
2018-11-22 15:32:23.6266099 UTC

interface main@main:Ex02 7103
  interface hash: e262b0e5ca7e52d6a25a94ab80f611f6
  ABI hash: 9c84adb8f08fe93416fd45810d42682b
  export-list hash: 64ef7a536300036c55e05e3b582b917d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbe72dce7169ea56d81ede094b67e0dc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ex02.ins
  Ex02.lkp
  Ex02.Expr{Ex02.Abs Ex02.Add Ex02.Mul Ex02.Sign Ex02.Sub Ex02.Val Ex02.Var}
  Ex02.IntFun
  Ex02.Tree{Ex02.Br Ex02.Leaf Ex02.Nil}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
e660bcdcf49c83776e9670316b443893
  $fEqExpr :: GHC.Classes.Eq Ex02.Expr
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex02.Expr Ex02.$fEqExpr_$c== Ex02.$fEqExpr_$c/= -}
e660bcdcf49c83776e9670316b443893
  $fEqExpr_$c/= :: Ex02.Expr -> Ex02.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Ex02.Expr b :: Ex02.Expr ->
                 case Ex02.$fEqExpr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e660bcdcf49c83776e9670316b443893
  $fEqExpr_$c== :: Ex02.Expr -> Ex02.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
05269e67d72d2ff0f40a86cb9c404c0c
  $fEqTree ::
    (GHC.Classes.Eq k, GHC.Classes.Eq d) =>
    GHC.Classes.Eq (Ex02.Tree k d)
  DFunId[0]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ k
                      @ d
                      $dEq :: GHC.Classes.Eq k
                      $dEq1 :: GHC.Classes.Eq d.
                  @ (Ex02.Tree k d)
                  (Ex02.$fEqTree_$c== @ k @ d $dEq $dEq1)
                  (Ex02.$fEqTree_$c/= @ k @ d $dEq $dEq1) -}
05269e67d72d2ff0f40a86cb9c404c0c
  $fEqTree_$c/= ::
    (GHC.Classes.Eq k, GHC.Classes.Eq d) =>
    Ex02.Tree k d -> Ex02.Tree k d -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ d
                   $dEq :: GHC.Classes.Eq k
                   $dEq1 :: GHC.Classes.Eq d
                   a :: Ex02.Tree k d
                   b :: Ex02.Tree k d ->
                 case Ex02.$fEqTree_$c== @ k @ d $dEq $dEq1 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
05269e67d72d2ff0f40a86cb9c404c0c
  $fEqTree_$c== ::
    (GHC.Classes.Eq k, GHC.Classes.Eq d) =>
    Ex02.Tree k d -> Ex02.Tree k d -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr :: GHC.Num.Num Ex02.Expr
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex02.Expr
                  Ex02.$fNumExpr_$c+
                  Ex02.$fNumExpr_$c-
                  Ex02.$fNumExpr_$c*
                  Ex02.$fNumExpr_$cnegate
                  Ex02.$fNumExpr_$cabs
                  Ex02.$fNumExpr_$csignum
                  Ex02.$fNumExpr_$cfromInteger -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr1 :: Ex02.Expr
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Ex02.Val Ex02.$fNumExpr2) -}
bb702ae5000400c08c6b751a1fdb83db
  $fNumExpr2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr3 :: Ex02.Expr
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Ex02.Val Ex02.$fNumExpr4) -}
5bb670a4051a810526d0d218be042c12
  $fNumExpr4 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# -1.0) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr5 :: Ex02.Expr
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Ex02.Val Ex02.$fNumExpr6) -}
ba2c7594ba7d76a1f8749130cae47b44
  $fNumExpr6 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr_$c* :: Ex02.Expr -> Ex02.Expr -> Ex02.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ e1 :: Ex02.Expr e2 :: Ex02.Expr ->
                 case e1 of wild {
                   DEFAULT -> Ex02.Mul wild e2
                   Ex02.Val e4
                   -> case e2 of wild1 {
                        DEFAULT -> Ex02.Mul wild wild1
                        Ex02.Val e5 -> Ex02.Val (GHC.Float.timesDouble e4 e5) } }) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr_$c+ :: Ex02.Expr -> Ex02.Expr -> Ex02.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ e1 :: Ex02.Expr e2 :: Ex02.Expr ->
                 case e1 of wild {
                   DEFAULT -> Ex02.Add wild e2
                   Ex02.Val e4
                   -> case e2 of wild1 {
                        DEFAULT -> Ex02.Add wild wild1
                        Ex02.Val e5 -> Ex02.Val (GHC.Float.plusDouble e4 e5) } }) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr_$c- :: Ex02.Expr -> Ex02.Expr -> Ex02.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ e1 :: Ex02.Expr e2 :: Ex02.Expr ->
                 case e1 of wild {
                   DEFAULT -> Ex02.Sub wild e2
                   Ex02.Val e4
                   -> case e2 of wild1 {
                        DEFAULT -> Ex02.Sub wild wild1
                        Ex02.Val e5 -> Ex02.Val (GHC.Float.minusDouble e4 e5) } }) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr_$cabs :: Ex02.Expr -> Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ e :: Ex02.Expr ->
                 case e of wild {
                   DEFAULT -> Ex02.Abs wild
                   Ex02.Val e1
                   -> case e1 of wild1 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=## x 0.0) of wild2 {
                        GHC.Types.False
                        -> Ex02.Val (GHC.Types.D# (GHC.Prim.negateDouble# x))
                        GHC.Types.True -> wild } } }) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr_$cfromInteger :: GHC.Integer.Type.Integer -> Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ i :: GHC.Integer.Type.Integer ->
                 Ex02.Val (GHC.Float.$fNumDouble_$cfromInteger i)) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr_$cnegate :: Ex02.Expr -> Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ e :: Ex02.Expr ->
                 case e of wild {
                   DEFAULT -> Ex02.Sub Ex02.$fNumExpr5 wild
                   Ex02.Val e1 -> Ex02.Val (GHC.Float.negateDouble e1) }) -}
e660bcdcf49c83776e9670316b443893
  $fNumExpr_$csignum :: Ex02.Expr -> Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ e :: Ex02.Expr ->
                 case e of wild {
                   DEFAULT -> Ex02.Sign wild
                   Ex02.Val e1
                   -> case e1 of wild1 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## x 0.0) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## x 0.0) of wild3 {
                             GHC.Types.False -> Ex02.$fNumExpr5
                             GHC.Types.True -> Ex02.$fNumExpr3 }
                        GHC.Types.True -> Ex02.$fNumExpr1 } } }) -}
e660bcdcf49c83776e9670316b443893
  $fShowExpr :: GHC.Show.Show Ex02.Expr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex02.Expr
                  Ex02.$fShowExpr_$cshowsPrec
                  Ex02.$fShowExpr_$cshow
                  Ex02.$fShowExpr_$cshowList -}
e660bcdcf49c83776e9670316b443893
  $fShowExpr1 :: Ex02.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Ex02.Expr -> Ex02.$w$cshowsPrec 0 w) -}
e660bcdcf49c83776e9670316b443893
  $fShowExpr_$cshow :: Ex02.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Ex02.Expr ->
                 Ex02.$fShowExpr_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e660bcdcf49c83776e9670316b443893
  $fShowExpr_$cshowList :: [Ex02.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Ex02.Expr Ex02.$fShowExpr1) -}
e660bcdcf49c83776e9670316b443893
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Ex02.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Ex02.Expr ->
                 case w of ww { GHC.Types.I# ww1 -> Ex02.$w$cshowsPrec ww1 w1 }) -}
05269e67d72d2ff0f40a86cb9c404c0c
  $fShowTree ::
    (GHC.Show.Show k, GHC.Show.Show d) => GHC.Show.Show (Ex02.Tree k d)
  DFunId[0]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ k
                      @ d
                      $dShow :: GHC.Show.Show k
                      $dShow1 :: GHC.Show.Show d.
                  @ (Ex02.Tree k d)
                  (Ex02.$fShowTree_$cshowsPrec @ k @ d $dShow $dShow1)
                  (Ex02.$fShowTree_$cshow @ k @ d $dShow $dShow1)
                  (Ex02.$fShowTree_$cshowList @ k @ d $dShow $dShow1) -}
692d8b3b468ae583cdedf6afc07dbff4
  $fShowTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
05269e67d72d2ff0f40a86cb9c404c0c
  $fShowTree_$cshow ::
    (GHC.Show.Show k, GHC.Show.Show d) =>
    Ex02.Tree k d -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ d
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show d
                   x :: Ex02.Tree k d ->
                 Ex02.$fShowTree_$cshowsPrec
                   @ k
                   @ d
                   $dShow
                   $dShow1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
05269e67d72d2ff0f40a86cb9c404c0c
  $fShowTree_$cshowList ::
    (GHC.Show.Show k, GHC.Show.Show d) =>
    [Ex02.Tree k d] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ d
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show d
                   eta :: [Ex02.Tree k d]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Ex02.Tree k d)
                   (Ex02.$fShowTree_$cshowsPrec
                      @ k
                      @ d
                      $dShow
                      $dShow1
                      Ex02.$fShowTree1)
                   eta
                   eta1) -}
05269e67d72d2ff0f40a86cb9c404c0c
  $fShowTree_$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show d) =>
    GHC.Types.Int -> Ex02.Tree k d -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
e660bcdcf49c83776e9670316b443893
  $w$cshowsPrec :: GHC.Prim.Int# -> Ex02.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
e660bcdcf49c83776e9670316b443893
  data Expr
    = Val GHC.Types.Double
    | Var GHC.Base.String
    | Add Ex02.Expr Ex02.Expr
    | Mul Ex02.Expr Ex02.Expr
    | Sub Ex02.Expr Ex02.Expr
    | Abs Ex02.Expr
    | Sign Ex02.Expr
7768ba338e97c1f58d5a2a6745ba59ee
  type IntFun = Ex02.Tree GHC.Types.Int GHC.Types.Int
05269e67d72d2ff0f40a86cb9c404c0c
  data Tree k d
    = Br (Ex02.Tree k d) (Ex02.Tree k d) k d | Leaf k d | Nil
    Promotable
56ba49f50c568f9704485fa3115873fa
  ins ::
    GHC.Classes.Ord k => k -> d -> Ex02.Tree k d -> Ex02.Tree k d
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,C(C1(U)),A,A,A)><L,U><L,U><S,1*U> -}
c5f562d7391c0116d73565e93dd555c7
  lkp ::
    (GHC.Base.Monad m, GHC.Classes.Ord k) => Ex02.Tree k d -> k -> m d
  {- Arity: 4,
     Strictness: <S,1*U(A,A,A,1*C1(U),1*C1(U))><L,U(U(C(C1(U)),A),A,C(C1(U)),A,C(C1(U)),A,A,A)><S,1*U><L,U> -}
instance GHC.Classes.Eq [Ex02.Expr] = Ex02.$fEqExpr
instance GHC.Classes.Eq [Ex02.Tree] = Ex02.$fEqTree
instance GHC.Num.Num [Ex02.Expr] = Ex02.$fNumExpr
instance GHC.Show.Show [Ex02.Expr] = Ex02.$fShowExpr
instance GHC.Show.Show [Ex02.Tree] = Ex02.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

